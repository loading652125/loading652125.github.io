<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ldrtech blog</title>
  <subtitle>小黑屋博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ldrtech.cn/"/>
  <updated>2017-04-24T10:44:34.582Z</updated>
  <id>http://ldrtech.cn/</id>
  
  <author>
    <name>zjs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蓝桥杯导弹拦截（动态规划）</title>
    <link href="http://ldrtech.cn/2017/04/24/daodan/"/>
    <id>http://ldrtech.cn/2017/04/24/daodan/</id>
    <published>2017-04-24T10:41:02.000Z</published>
    <updated>2017-04-24T10:44:34.582Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-04-05<br>问题描述：<br>某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。<br>输入导弹依次飞来的高度（雷达给出的高度数据是不大于30000的正整数），计算这套系统最多能拦截多少导弹，如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。<br>输入格式<br>一行，为导弹依次飞来的高度<br>输出格式<br>两行，分别是最多能拦截的导弹数与要拦截所有导弹最少要配备的系统数<br>样例输入<br>389 207 155 300 299 170 158 65<br>样例输出<br>6<br>2</p>
</blockquote>
<p>网络思路（<strong>强势留坑，毕竟不太懂先，留着慢慢折腾</strong>）<br>/* 思路：<br>1.要求后面炮弹不高于前面，最大可以拦截多少导弹， 就是求最长下降子序列 dp[i]=max(dp[i],d[j]+1) (j=1到i-1)<br>对于每个节点，扫面他前面i-1个节点，如果比我的大或等于我， 就考虑 用不用 他的 ,用他的话就是他的dp[j]+1，不用的话就我自己来dp[i]<br>然后 dp[i]=max(dp[i],d[j]+1) 选最长的，就是拦截到最多的<br>注：dp[i]表示到i位置前i个最长（多）拦截了多少 </p>
<p>2.要求拦截所有导弹最少需要多少系统，就是求最长上升子序列<br>（分析：因为dps[i]表示到i位置前i个需要多少系统）<br>对于当前节点，扫描前面的所有节点，如果比现在的小，这时就要更新当前节点，<br>dps[i]是在前面的基础上选最大的+1 </p>
<p>比方：389 207 155 300 299 170 158 65<br>dps[1]=1,dps[2]=1,dps[3]=1,num[4]比num[2]和Num[3]大<br>所以dps[4]扫描前面的选择+1 </p>
<p>困惑：当前节点必须必比以前某个节点的高才会用到 以前节点的dps<br>例如后面的299不比300的高，所以他不会用到第三套系统<br>*/<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daodan</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">		String[] missile = reader.readLine().split(<span class="string">" "</span>);</div><div class="line">		reader.close();</div><div class="line">		<span class="keyword">int</span>[] high = <span class="keyword">new</span> <span class="keyword">int</span>[missile.length];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high.length; i++) &#123;</div><div class="line">			high[i] = Integer.parseInt(missile[i]);</div><div class="line">		&#125;</div><div class="line">		System.out.println(getMaxIntercept(high));</div><div class="line">		System.out.println(getNumberOfIntercepter(high));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxIntercept</span><span class="params">(<span class="keyword">int</span>[] high)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[high.length];</div><div class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high.length; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; high.length; j++) &#123;</div><div class="line">				<span class="keyword">if</span> (high[j] &lt;= high[i]) &#123;</div><div class="line">					dp[j] = Integer.max(dp[j], dp[i] + <span class="number">1</span>);</div><div class="line">					max = Integer.max(max, dp[j]);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> max + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumberOfIntercepter</span><span class="params">(<span class="keyword">int</span>[] high)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> numberOfIntercepter = <span class="number">0</span>;</div><div class="line">		<span class="keyword">boolean</span>[] isIntercept = <span class="keyword">new</span> <span class="keyword">boolean</span>[high.length];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high.length; i++) &#123;</div><div class="line">			<span class="keyword">int</span> midHighDifference = getMinHighDifference(high, i, isIntercept);</div><div class="line">			<span class="keyword">if</span> (midHighDifference == -<span class="number">1</span>) &#123;</div><div class="line">				numberOfIntercepter++;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				isIntercept[midHighDifference] = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> numberOfIntercepter;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMinHighDifference</span><span class="params">(<span class="keyword">int</span>[] high, <span class="keyword">int</span> pos, <span class="keyword">boolean</span>[] isIntercept)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> minHighDifferenceIndex = -<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (isIntercept[i] == <span class="keyword">false</span> &amp;&amp; high[i] &gt;= high[pos]) &#123;</div><div class="line">				<span class="keyword">if</span> (minHighDifferenceIndex == -<span class="number">1</span> || high[i] &lt; high[minHighDifferenceIndex]) &#123;</div><div class="line">					minHighDifferenceIndex = i;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> minHighDifferenceIndex;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-04-05&lt;br&gt;问题描述：&lt;br&gt;某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来
    
    </summary>
    
      <category term="算法" scheme="http://ldrtech.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>i++和++i谁的效率高？</title>
    <link href="http://ldrtech.cn/2017/04/24/iQuestion/"/>
    <id>http://ldrtech.cn/2017/04/24/iQuestion/</id>
    <published>2017-04-24T10:21:54.000Z</published>
    <updated>2017-04-24T10:38:36.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-03-27 </p>
</blockquote>
<p><em>最近没有码博客，前两星期回家了，加上有点慢，最近把文章都补上。</em><br>为什么会想到这个问题？<br>源于算法老师在上课提的问题，i++和++i谁的效率高？<br>看到这个问题我也是一脸懵逼，QAQ当年视频不是说纠结前++和后加加没啥必要吗，这是<strong>搞哪出啊</strong>？<br>后来说到翻译成汇编指令，故所以去网上搜索一波。<br>C/C++面试题：i++与++i哪个效率更高？<br><a href="http://blog.csdn.net/debugconsole/article/details/8058605" target="_blank" rel="external">以上是来自debugconsole的csdn博客</a><br>摘抄如下<br>在这里声明，简单的比较前缀自增运算符和后缀自增运算符的效率是片面的，因为存在很多因素影响这个问题的答案。<br>首先考虑内建数据类型的情况：如果自增运算表达式的结果没有被使用，而是仅仅简单的用于增加一员操作数，<br>答案是明确的，前缀法和后缀法没有任何区别，编译器的处理都应该是相同的，很难想象得出有什么编译器实现可以别出心裁在二者之间制造任何差异。<br>我们看看下面这个程序：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include </span></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;   </div><div class="line">    i++;</div><div class="line">    ++i;</div><div class="line">    x = i++;</div><div class="line">    x = ++i;   </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码在VC 6.0上编译得到的汇编如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">; Line 5</div><div class="line">        mov        DWORD PTR _i$[ebp], 0</div><div class="line">; Line 6</div><div class="line">        mov        DWORD PTR _x$[ebp], 0</div><div class="line">; Line 8</div><div class="line">        mov        eax, DWORD PTR _i$[ebp]</div><div class="line">        add        eax, 1</div><div class="line">        mov        DWORD PTR _i$[ebp], eax</div><div class="line">; Line 9</div><div class="line">        mov        ecx, DWORD PTR _i$[ebp]</div><div class="line">        add        ecx, 1</div><div class="line">        mov        DWORD PTR _i$[ebp], ecx</div><div class="line">; Line 10</div><div class="line">        mov        edx, DWORD PTR _i$[ebp]</div><div class="line">        mov        DWORD PTR _x$[ebp], edx</div><div class="line">        mov        eax, DWORD PTR _i$[ebp]</div><div class="line">        add        eax, 1</div><div class="line">        mov        DWORD PTR _i$[ebp], eax</div><div class="line">; Line 11</div><div class="line">        mov        ecx, DWORD PTR _i$[ebp]</div><div class="line">        add        ecx, 1</div><div class="line">        mov        DWORD PTR _i$[ebp], ecx</div><div class="line">        mov        edx, DWORD PTR _i$[ebp]</div><div class="line">        mov        DWORD PTR _x$[ebp], edx</div></pre></td></tr></table></figure></p>
<ul>
<li>代码段第8行和第9行生成的汇编代码分别对应Line 8和Line 9下对应的汇编代码，可以看到三个步骤几乎完全一样。</li>
<li>代码段第10行和第11行生成的汇编代码分别对应Line 10和Line 11下对应的汇编代码，可以看到都是五个步骤，只是在加1的先后顺序上有一些区别，效率也是完全一样的。<br>由此说明，考虑内建数据类型时，它们的效率差别不大（去除编译器优化的影响）。所以在这种情况下我们大可不必关心。<br>现在让我们再考虑自定义数据类型（主要是指类）的情况。此时我们不需要再做很多汇编代码的分析了，因为前缀式（++i）可以返回对象的引用，<br>而后缀式（i++）必须产生一个临时对象保存更改前对象的值并返回(实现过自定义类型++运算符定义的就知道)，所以导致在大对象的时候产生了较大的复制开销，<br>引起效率降低，因此处理使用者自定义类型（注意不是指内建类型）的时候，应该尽可能的使用前缀式地增/递减，因为他天生体质较佳。<br>答案：</li>
<li>内建数据类型的情况，效率没有区别。</li>
<li>自定义数据类型的情况，++i效率较高。</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-03-27 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;最近没有码博客，前两星期回家了，加上有点慢，最近把文章都补上。&lt;/em&gt;&lt;br&gt;为什么会想到这个问题？&lt;br&gt;源于算法老师在上课提的问题，i++和++i谁的效率高？
    
    </summary>
    
      <category term="文章" scheme="http://ldrtech.cn/categories/%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>汉诺塔java实现</title>
    <link href="http://ldrtech.cn/2017/04/24/Hanoi/"/>
    <id>http://ldrtech.cn/2017/04/24/Hanoi/</id>
    <published>2017-04-24T10:07:41.000Z</published>
    <updated>2017-04-24T10:15:17.064Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文2017-03-05</p>
</blockquote>
<p>汉诺塔，维基百科解释如下</p>
<blockquote>
<p>最早发明这个问题的人是法国数学家爱德华·卢卡斯。<br>传说印度某间寺院有三根柱子，上串64个金盘。寺院里的僧侣依照一个古老的预言，以上述规则移动这些盘子；预言说当这些盘子移动完毕，世界就会灭亡。这个传说叫做梵天寺之塔问题(Tower of Brahma puzzle)。但不知道是卢卡斯自创的这个传说，还是他受他人启发。<br>若传说属实，僧侣们需要264 − 1步才能完成这个任务；若他们每秒可完成一个盘子的移动，就需要5849亿年才能完成。整个宇宙现在也不过137亿年。</p>
</blockquote>
<img src="/2017/04/24/Hanoi/hanoi1.jpg" alt="hanoi1" title="hanoi1">
<p>问题描述如下</p>
<ul>
<li>A塔上有N个盘，并且盘从上到下依次增大，需要把A塔上的所有盘移动到C塔上，大盘不能在小盘上面。</li>
<li>假设从上到下的序号为1.2.3.4….n</li>
<li>如果A上有一个盘，则把1盘直接从A塔移动到C塔上。</li>
<li>如果A上有两个盘，则把1盘从A塔移动到B塔上，把2盘从A塔移动到C塔上，然后把1盘从B塔移动到C塔上。</li>
<li>如果A上有三个盘，则把1盘从A塔移动到C塔上，把2盘从A塔移动到B塔上，然后把1盘从C塔移动到B塔上，然后把3盘从A塔移动到C塔上，把1盘从B塔移动到A塔上，然后把2盘从B塔移动到C塔上。</li>
<li>归纳为如果为一个盘，直接从A或B塔移动到C塔上，如果有n个盘，先把n-1个盘从A塔借助C塔移动到B塔，把最底下的n那一个盘移动到C塔，再把n-1个盘从B塔借助A塔移动到C塔。<br>算法总结：递归调用n-1个盘的移动，直到n为1。</li>
</ul>
<p>java代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStreamReader;</div><div class="line"></div><div class="line">public <span class="keyword">class</span> Hanoi &#123;</div><div class="line">    /  定义移动方法</div><div class="line">       @param topN上方N个盘</div><div class="line">       @param from 初始的塔，开始移动的地方</div><div class="line">       @param inter中间的塔，借助移动的地方</div><div class="line">       @param to目标的塔，要移动到的地方</div><div class="line">     */</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> move(<span class="keyword">int</span> topN, <span class="keyword">char</span> from, <span class="keyword">char</span> inter, <span class="keyword">char</span> to) &#123;</div><div class="line">        <span class="keyword">if</span> (topN == <span class="number">1</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"盘 1从"</span> + from + <span class="string">"移动 "</span> + to);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 递归调用</span></div><div class="line">            move(topN - <span class="number">1</span>, from, to, inter);</div><div class="line">            System.out.println(<span class="string">"盘 "</span> + topN + <span class="string">"从 "</span> + from + <span class="string">"移动 "</span> + to);</div><div class="line">            move(topN - <span class="number">1</span>, inter, from, to);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws NumberFormatException, IOException &#123;</div><div class="line">        System.out.println(<span class="string">"输入汉诺塔的层数"</span>);</div><div class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));</div><div class="line">        <span class="keyword">int</span> n = Integer.parseInt(reader.readLine());</div><div class="line">        <span class="comment">// 塔分别为 A，B，C</span></div><div class="line">        move(n, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>结果如下<br>3个盘<br><img src="/2017/04/24/Hanoi/hanoi2.png" alt="hanoi2" title="hanoi2"><br>5个盘<br><img src="/2017/04/24/Hanoi/hanoi3.png" alt="hanoi3" title="hanoi3"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文2017-03-05&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;汉诺塔，维基百科解释如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最早发明这个问题的人是法国数学家爱德华·卢卡斯。&lt;br&gt;传说印度某间寺院有三根柱子，上串64个金盘。寺院里的僧侣依
    
    </summary>
    
      <category term="算法" scheme="http://ldrtech.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>马踏棋盘算法（骑士周游问题）</title>
    <link href="http://ldrtech.cn/2017/04/24/HorseStep/"/>
    <id>http://ldrtech.cn/2017/04/24/HorseStep/</id>
    <published>2017-04-24T09:44:20.000Z</published>
    <updated>2017-04-24T09:53:55.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-02-22</p>
</blockquote>
<p>1.国际象棋的棋盘为8*8的方格棋盘。现将”马”放在任意指定的方格中，按照”马”走棋的规则将”马”进行移动。要求每个方格只能进入一次，最终使得”马”走遍棋盘的64个方格。<br>2.马的行走方式为“日”<br><img src="/2017/04/24/HorseStep/HorseStep1.jpg" alt="HorseStep1" title="HorseStep1"></p>
<blockquote>
<p>哈密顿图（英语：Hamiltonian path，或Traceable path）是一个无向图，由天文学家哈密顿提出，由指定的起点前往指定的终点，途中经过所有其他节点且只经过一次。在图论中是指含有哈密顿回路的图，闭合的哈密顿路径称作哈密顿回路（Hamiltonian cycle），含有图中所有顶的路径称作哈密顿路径。</p>
</blockquote>
<p>哈密尔顿图的定义： G=(V,E)是一个图，若G中一条通路通过每一个顶点一次且仅一次，称这条通路为哈密尔顿通路。若G中一个圈通过每一个顶点一次且仅一次，称这个圈为哈密尔顿圈。若一个图存在哈密尔顿圈，就称为哈密尔顿图</p>
<p>使用java编写如下，使用递归和深度遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorseStep</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> X = <span class="number">8</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Y = <span class="number">8</span>;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 棋盘初始化</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> chess[][] = <span class="keyword">new</span> <span class="keyword">int</span>[X][Y];</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 打印棋盘</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; X; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Y; j++) &#123;</div><div class="line">				<span class="keyword">if</span>(chess[i][j] &lt; <span class="number">10</span>)&#123;</div><div class="line">					System.out.print(chess[i][j]+<span class="string">"    "</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span>&#123;</div><div class="line">					System.out.print(chess[i][j]+<span class="string">"   "</span>);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 下一个位置</div><div class="line">	 * 找到基于马当前在棋盘中的位置的(x,y)坐标的下一个可走的位置的坐标，如果成功找到则返回1，</div><div class="line">	 * 且直接修改原来位置的坐标，否则返回0 </div><div class="line">	 * 成功找到的条件是该位置存在且还没有被马走过</div><div class="line">	 * @param xy：当前马所在棋盘位置的x，y坐标 </div><div class="line">	 * @param count：不考虑边缘的情况，马在任意一位置的下一个位置都可能有八种情况，</div><div class="line">	 * count就是对这八种情况进行判断</div><div class="line">	 * 只要找到其中一种就返回1 </div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextXy</span><span class="params">(XY xy,<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> x = xy.getX();</div><div class="line">		<span class="keyword">int</span> y = xy.getY();</div><div class="line">		<span class="keyword">int</span> nextEnable = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">switch</span>(count)&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 从右上开始查找</div><div class="line">		 */</div><div class="line">			<span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">				<span class="keyword">if</span>( x+<span class="number">1</span>&lt;=X-<span class="number">1</span> &amp;&amp; y-<span class="number">2</span>&gt;=<span class="number">0</span> &amp;&amp; chess[x+<span class="number">1</span>][y-<span class="number">2</span>]==<span class="number">0</span>)&#123;  </div><div class="line">	                x +=<span class="number">1</span>;  </div><div class="line">	                y -=<span class="number">2</span>;</div><div class="line">	                nextEnable = <span class="number">1</span>;  </div><div class="line">	            &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">				<span class="keyword">if</span>( x+<span class="number">2</span>&lt;=X-<span class="number">1</span> &amp;&amp; y-<span class="number">1</span>&gt;=<span class="number">0</span> &amp;&amp; chess[x+<span class="number">2</span>][y-<span class="number">1</span>]==<span class="number">0</span>)&#123;  </div><div class="line">	                x +=<span class="number">2</span>;  </div><div class="line">	                y -=<span class="number">1</span>;  </div><div class="line">	                nextEnable = <span class="number">1</span>;  </div><div class="line">	            &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">				<span class="keyword">if</span>( x+<span class="number">2</span>&lt;=X-<span class="number">1</span> &amp;&amp; y+<span class="number">1</span>&lt;=Y-<span class="number">1</span> &amp;&amp; chess[x+<span class="number">2</span>][y+<span class="number">1</span>]==<span class="number">0</span>)&#123;  </div><div class="line">	                x +=<span class="number">2</span>;  </div><div class="line">	                y +=<span class="number">1</span>;  </div><div class="line">	                nextEnable = <span class="number">1</span>;  </div><div class="line">	            &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">				<span class="keyword">if</span>( x+<span class="number">1</span>&lt;=X-<span class="number">1</span> &amp;&amp; y+<span class="number">2</span>&lt;=Y-<span class="number">1</span> &amp;&amp; chess[x+<span class="number">1</span>][y+<span class="number">2</span>]==<span class="number">0</span>)&#123;  </div><div class="line">	                x +=<span class="number">1</span>;  </div><div class="line">	                y +=<span class="number">2</span>;  </div><div class="line">	                nextEnable = <span class="number">1</span>;  </div><div class="line">	            &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">				<span class="keyword">if</span>( x-<span class="number">1</span>&gt;=<span class="number">0</span> &amp;&amp; y+<span class="number">2</span>&lt;=Y-<span class="number">1</span> &amp;&amp; chess[x-<span class="number">1</span>][y+<span class="number">2</span>]==<span class="number">0</span>)&#123;  </div><div class="line">	                x -=<span class="number">1</span>;  </div><div class="line">	                y +=<span class="number">2</span>;  </div><div class="line">	                nextEnable = <span class="number">1</span>;  </div><div class="line">	            &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">				<span class="keyword">if</span>( x-<span class="number">2</span>&gt;=<span class="number">0</span> &amp;&amp; y+<span class="number">1</span>&lt;=Y-<span class="number">1</span> &amp;&amp; chess[x-<span class="number">2</span>][y+<span class="number">1</span>]==<span class="number">0</span>)&#123;  </div><div class="line">	                x -=<span class="number">2</span>;  </div><div class="line">	                y +=<span class="number">1</span>;  </div><div class="line">	                nextEnable = <span class="number">1</span>;  </div><div class="line">	            &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">				<span class="keyword">if</span>( x-<span class="number">2</span>&gt;=<span class="number">0</span> &amp;&amp; y-<span class="number">1</span>&gt;=<span class="number">0</span> &amp;&amp; chess[x-<span class="number">2</span>][y-<span class="number">1</span>]==<span class="number">0</span>)&#123;  </div><div class="line">		            x -=<span class="number">2</span>;  </div><div class="line">		            y -=<span class="number">1</span>;  </div><div class="line">		            nextEnable = <span class="number">1</span>;  </div><div class="line">		        &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">				<span class="keyword">if</span>( x-<span class="number">1</span>&gt;=<span class="number">0</span> &amp;&amp; y-<span class="number">2</span>&gt;=<span class="number">0</span> &amp;&amp; chess[x-<span class="number">1</span>][y-<span class="number">2</span>]==<span class="number">0</span>)&#123;  </div><div class="line">	                x -=<span class="number">1</span>;  </div><div class="line">	                y -=<span class="number">2</span>;  </div><div class="line">	                nextEnable = <span class="number">1</span>;  </div><div class="line">	            &#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 如果下个点可以达，则修改x，y的值</div><div class="line">		 */</div><div class="line">		<span class="keyword">if</span>(nextEnable == <span class="number">1</span>) &#123;</div><div class="line">			xy.setX(x);</div><div class="line">			xy.setY(y);</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 深度优先遍历棋盘</div><div class="line">	 * @param x：当前马即将要走的位置的x坐标 </div><div class="line">	 * @param y：当前马即将要走的位置的y坐标 </div><div class="line">	 * @param tag：当前马即将要走的这个位置是第tag步，也就是说马已经走过了step-1个棋盘  </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">TravelChessBoard</span><span class="params">(XY xy,<span class="keyword">int</span> tag)</span></span>&#123;</div><div class="line">		<span class="comment">// flag保存是否有下一个可走的位置；count用于循环判断八种可走的位置  </span></div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//保存马即将要走的这个位置的坐标 </span></div><div class="line">		<span class="keyword">int</span> x = xy.getX();  </div><div class="line">        <span class="keyword">int</span> y = xy.getY();</div><div class="line">        </div><div class="line">        <span class="comment">//标记该位置已经走过了 </span></div><div class="line">        chess[x][y] = tag;</div><div class="line">        </div><div class="line">        <span class="comment">//如果此时tag等于棋盘格子的个数，则说明已经把棋盘的每一个格子都走过一次了  </span></div><div class="line">        <span class="comment">// 则打印棋盘输出走过的顺序；递归的返回条件  </span></div><div class="line">        <span class="keyword">if</span> (X*Y == tag) &#123;</div><div class="line">			print();</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 如果还没有走完棋盘，则选择下一个位置，依次判断那八种可能的情况 </span></div><div class="line">        flag = nextXy(xy, count);</div><div class="line">        <span class="keyword">while</span> (<span class="number">0</span> == flag &amp;&amp; count&lt;<span class="number">8</span>) &#123;</div><div class="line">			count++;</div><div class="line">			flag = nextXy(xy, count);</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 在当前位置找到下一个可走的位置 </span></div><div class="line">        <span class="keyword">while</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * 递归调用走向下一个位置，因为在nextXy函数中直接修改了当前位置的坐标，</div><div class="line">        	 * 所以此时的x和y就表示下一个可走位置的坐标</div><div class="line">        	 * 如果此时返回的是1，说明棋盘已经走完了，继续向上返回1</div><div class="line">        	 */</div><div class="line">        	   </div><div class="line">			<span class="keyword">if</span> (TravelChessBoard(xy, tag+<span class="number">1</span>) == <span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">//返回的不是1，则返回上一个位置，在上一个位置重新选择一个可走位置继续</span></div><div class="line">			xy.setX(x);</div><div class="line">			xy.setY(y);</div><div class="line">			<span class="comment">// 前count种可走位置的情况都判断过了，从count+1种情况继续判断 </span></div><div class="line">			count++;</div><div class="line">			flag = nextXy(xy, count);</div><div class="line">			<span class="keyword">while</span> (<span class="number">0</span> == flag &amp;&amp; count&lt;<span class="number">7</span>) &#123;</div><div class="line">				count++;</div><div class="line">				flag = nextXy(xy, count);</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">        <span class="comment">// 八种可能的情况都判断过了，还是没有下一个可走的位置了  </span></div><div class="line">        <span class="comment">// 那么说明该次深度遍历失败，此种走法不行，则应该从当前位置回退到上一个位置  </span></div><div class="line">        <span class="comment">// 所以重新标记当前位置还没有被走过</span></div><div class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</div><div class="line">			chess[x][y] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">        <span class="comment">// 如果都没有可走的位置了，则返回0，代表继续向后回退 </span></div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">long</span> begin =System.currentTimeMillis();</div><div class="line">		XY xy = <span class="keyword">new</span> XY();</div><div class="line">		<span class="comment">//开始棋盘点</span></div><div class="line">		xy.setX(<span class="number">0</span>);</div><div class="line">		xy.setY(<span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> (TravelChessBoard(xy, <span class="number">1</span>) == <span class="number">0</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"马踏棋盘失败"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">long</span> usedTime = System.currentTimeMillis() - begin;</div><div class="line">		System.out.println(<span class="string">"耗时"</span>+(usedTime/<span class="number">1000.0</span>)+<span class="string">"秒"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 构建棋盘点</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XY</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.x = x;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> y;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.y = y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>运行结果<br><img src="/2017/04/24/HorseStep/HorseStep2.png" alt="HorseStep2" title="HorseStep2"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-02-22&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.国际象棋的棋盘为8*8的方格棋盘。现将”马”放在任意指定的方格中，按照”马”走棋的规则将”马”进行移动。要求每个方格只能进入一次，最终使得”马”走遍棋盘的64个方格。&lt;b
    
    </summary>
    
      <category term="算法" scheme="http://ldrtech.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>重装系统篇之基本软件操作</title>
    <link href="http://ldrtech.cn/2017/04/24/reinstall3/"/>
    <id>http://ldrtech.cn/2017/04/24/reinstall3/</id>
    <published>2017-04-24T09:00:26.000Z</published>
    <updated>2017-04-24T09:56:46.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-02-12</p>
</blockquote>
<p>U盘来重装系统这个是重点，整个博客都是围绕U盘来重装，U盘类型包括（<em>普通U盘，读卡器加内存卡，外置磁盘，MP4等</em>）,只要是个外部存储器。<br>当然也有非U盘安装系统的，不介绍其他了，知识是通用的，相信会一种后其他也会。<br>前面一篇可能看的一头露水，这篇说说软件的操作</p>
<h2 id="首先是UltraISO（软碟通）"><a href="#首先是UltraISO（软碟通）" class="headerlink" title="首先是UltraISO（软碟通）"></a>首先是UltraISO（软碟通）</h2><p>UltraISO的作用是刻录镜像到U盘，对于不支持uefi的电脑来说是有必要使用的，用来刻录pe或者系统镜像<br>一般说来对于用U盘来重装系统的，我推荐使用pe的方式，简单。对于支持uefi的电脑来说直接把镜像文件复制到U盘就可以不用刻录，这里针对不支持uefi的情况下。<br>具体操作（已刻录一个pe为例）<br>打开软件<br><img src="/2017/04/24/reinstall3/reinstall31.png" alt="reinstall3" title="reinstall3"><br>打开镜像文件<br><img src="/2017/04/24/reinstall3/reinstall321.png" alt="reinstall3" title="reinstall3"><br>选择文件<br><br>选择U盘，写入方式（一般写入方式bios都支持，默认就好），格式化（最好格式化），然后写入<br><img src="/2017/04/24/reinstall3/reinstall33.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/reinstall341.png" alt="reinstall3" title="reinstall3"><br>等待完成<br><img src="/2017/04/24/reinstall3/reinstall342.png" alt="reinstall3" title="reinstall3"><br>完工。这样一个可以启动的pe就完成了，只需要设置U盘启动就能看到一个简化的系统了，如果自己电脑不能启动也可以有个救命稻草了。</p>
<h2 id="然后是分区管理diskgenius"><a href="#然后是分区管理diskgenius" class="headerlink" title="然后是分区管理diskgenius"></a>然后是分区管理diskgenius</h2><p>以下虚拟机操作<br>先是mbr磁盘操作<br><img src="/2017/04/24/reinstall3/mbr1.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/mbr2.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/mbr3.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/mbr4.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/mbr5.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/mbr6.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/mbr7.png" alt="reinstall3" title="reinstall3"><br>然后gpt磁盘操作<br><img src="/2017/04/24/reinstall3/gpt1.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/gpt2.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/gpt3.png" alt="reinstall3" title="reinstall3"><br><img src="/2017/04/24/reinstall3/gpt4.png" alt="reinstall3" title="reinstall3"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-02-12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;U盘来重装系统这个是重点，整个博客都是围绕U盘来重装，U盘类型包括（&lt;em&gt;普通U盘，读卡器加内存卡，外置磁盘，MP4等&lt;/em&gt;）,只要是个外部存储器。&lt;br&gt;当然也有非U
    
    </summary>
    
      <category term="教程" scheme="http://ldrtech.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="重装" scheme="http://ldrtech.cn/tags/%E9%87%8D%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>重装系统篇之重装基础知识</title>
    <link href="http://ldrtech.cn/2017/04/24/reinstall2/"/>
    <id>http://ldrtech.cn/2017/04/24/reinstall2/</id>
    <published>2017-04-24T08:25:07.000Z</published>
    <updated>2017-04-24T08:52:51.478Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-02-11</p>
</blockquote>
<p><strong>温馨提示，这里很无聊。</strong></p>
<h2 id="winpe"><a href="#winpe" class="headerlink" title="winpe"></a>winpe</h2><blockquote>
<p>Windows 预安装环境 (Windows PE) 是在 Windows 内核上构建的具有有限服务的最小 Win32 子系统，它用于为安装 Windows 而准备计算机，以便从网络文件服务器复制磁盘映像并启动 Windows 安装程序。（说白了就是个简单的windows操作系统）<br>常见的winpe有老毛桃、大白菜（基本带有后门，修改主页或强制加软件，不推荐不推荐不推荐，重要说三遍），当然也有没有后门绿色的pe（找找总是有的）</p>
</blockquote>
<img src="/2017/04/24/reinstall2/reinstall21.png" alt="reinstall21" title="reinstall21">
<p>上图一个绿色版pe</p>
<h2 id="系统镜像（要安装的东西）"><a href="#系统镜像（要安装的东西）" class="headerlink" title="系统镜像（要安装的东西）"></a>系统镜像（要安装的东西）</h2><p>系统镜像分两种</p>
<ol>
<li>是原装系统（以iso文件的后缀）</li>
<li>是封装系统（gho文件的后缀，但大多的加入winpe再封装为iso文件）<br>原装镜像的最正规下载地址时msdn<img src="/2017/04/24/reinstall2/reinstall22.png" alt="reinstall22" title="reinstall22">
gho封装镜像特别多，网上一搜一堆，尤其是xp和win7时代<br>gho镜像对磁盘来说是不好的，而且容易加入<strong>后门</strong>（换个说法就是系统管理员永远不是你自己）<img src="/2017/04/24/reinstall2/reinstall23.png" alt="reinstall23" title="reinstall23">
<img src="/2017/04/24/reinstall2/reinstall24.png" alt="reinstall24" title="reinstall24">
好处与坏处</li>
</ol>
<ul>
<li>原装系统的好处：微软亲儿子，没有修改，纯净</li>
<li>原装系统的坏处：后期处理比较麻烦（驱动，软件）</li>
</ul>
<p>gho系统</p>
<ul>
<li>好处:重装系统快，第三方驱动整合，集成必要软件</li>
<li>坏处：驱动不是特有，可能添加后门，磁盘伤害等等</li>
</ul>
<p>推荐就是<strong>使用原装系统</strong>，自己的电脑自己管理</p>
<hr>
<p><em>以下三个属于比较难和需要时间来看的东西，这里知识简单说说，详细的还是需要谷歌百度。</em></p>
<hr>
<h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>磁盘分区表格式可以分为两种，mbr和gpt磁盘（后者较为新）</p>
<blockquote>
<p>主引导记录（Master Boot Record，缩写：MBR），又叫做主引导扇区，是计算机开机后访问硬盘时所必须要读取的首个扇区，它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。在深入讨论主引导扇区内部结构的时候，有时也将其开zc头的446字节内容特指为“主引导记录”（MBR），其后是4个16字节的“磁盘分区表”（DPT），以及2字节的结束标志（55AA）。因此，在使用“主引导记录”（MBR）这个术语的时候，需要根据具体情况判断其到底是指整个主引导扇区，还是主引导扇区的前446字节。</p>
<p>主引导扇区记录着硬盘本身的相关信息以及硬盘各个分区的大小及位置信息，是数据信息的重要入口。如果它受到破坏，硬盘上的基本数据结构信息将会丢失，需要用繁琐的方式试探性的重建数据结构信息后才可能重新访问原先的数据。主引导扇区内的信息可以通过任何一种基于某种操作系统的分区工具软件写入，但和某种操作系统没有特定的关系，即只要创建了有效的主引导记录就可以引导任意一种操作系统（操作系统是创建在高级格式化的硬盘分区之上，是和一定的文件系统相联系的）。<br>上面看不懂很正常（搜索出的专业文字）</p>
</blockquote>
<p>mbr磁盘有主分区，扩展分区，逻辑分区的区别<br>Mbr磁盘支持2t以下的磁盘</p>
<p>可以有4个主分区，其中一个主分区必须为激活分区（常说的C盘），可以划分为三个主分区和一个扩展分区(相当于扩展分区为主分区，一个磁盘只能有一个扩展分区)，扩展分区相当于一个包含体，在扩展分区中可以划分为无数个逻辑分区。</p>
<p>在xp和win7中mbr磁盘通常分为一个主分区（C盘）加一个扩展分区（其中再分三个逻辑分区（d，e，f盘））<br><img src="/2017/04/24/reinstall2/reinstall25.png" alt="reinstall25" title="reinstall25"><br> 上图mbr磁盘</p>
<blockquote>
<p>局唯一标识分区表（GUID Partition Table，缩写：GPT）是一个实体硬盘的分区表的结构布局的标准。它是可扩展固件接口（EFI）标准（被Intel用于替代个人计算机的BIOS）的一部分，被用于替代BIOS系统中的一32bits来存储逻辑块地址和大小信息的主引导记录（MBR）分区表。对于那些扇区为512字节的磁盘，MBR分区表不支持容量大于2.2TB（2.2 × 1012字节）[1]的分区，然而，一些硬盘制造商（诸如希捷和西部数据）注意到这个局限性，并且将他们的容量较大的磁盘升级到4KB的扇区，这意味着MBR的有效容量上限提升到16 TiB。 这个看似“正确的”解决方案，在临时地降低人们对改进磁盘分配表的需求的同时，也给市场带来关于在有较大的块(block)的设备上从BIOS启动时，如何最佳的划分磁盘分区的困惑。GPT分配64bits给逻辑块地址，因而使得最大分区大小在264-1个扇区成为可能。对于每个扇区大小为512字节的磁盘，那意味着可以有9.4ZB(9.4 x 1021字节)或8 ZiB 个512字节（9,444,732,965,739,290,426,880字节 或 18,446,744,073,709,551,615（264-1）个扇区 x 512（29）字节每扇区）[1][2]。<br>gpt没有主扩展区别，所有分区都是主分区</p>
</blockquote>
<p>gpt磁盘结构<br><img src="/2017/04/24/reinstall2/reinstall26.png" alt="reinstall26" title="reinstall26"></p>
<h2 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h2><blockquote>
<p>BIOS（Basic Input/Output System的缩写、中文：基本输入输出系统），在IBM PC兼容系统上，是一种业界标准的固件界面。[1]。BIOS这个字眼是在1975年第一次由CP/M操作系统中出现。BIOS是个人电脑启动时加载的第一个软件。<br>BIOS用于电脑开机时运行系统各部分的的自我检测(Power On Self Test)，并加载引导程序(IPL)或存储在主存的作业系统。此外，BIOS还向作业系统提供一些系统参数。系统硬件的变化是由BIOS隐藏，程序使用BIOS功能而不是直接控制硬件。<br>现在新的笔记本电脑一般常见到系微bios<br></p>
</blockquote>
<p>我们主要是为了能去bios设置参数，需要一定发英语知识。了解bios主要是为了设置启动模式（传统兼容启动这类的），启动顺序（决定什么硬件优先被引导启动，比如先U盘再磁盘）</p>
<p>进入bios的方式一般开机有显示按什么键位，或者可以谷歌百度自己机型加bios<br>bios版本有什么多，中文英文也有，一般了解一种后其他都能使用<br>bios是很基础的部分，操作需要谨慎<br>多去搜索和操作才能真正了解</p>
<h2 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h2><blockquote>
<p>新型UEFI，全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)， 是一种详细描述类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，加载到一种操作系统上。<br>可扩展固件接口（Extensible Firmware Interface，EFI）是 Intel 为 PC 固件的体系结构、接口和服务提出的建议标准。其主要目的是为了提供一组在 OS 加载之前（启动前）在所有平台上一致的、正确指定的启动服务，被看做是有近20多年历史的 BIOS 的继任者。UEFI是由EFI1.10为基础发展起来的，它的所有者已不再是Intel，而是一个称作Unified EFI Form的国际组织。</p>
</blockquote>
<img src="/2017/04/24/reinstall2/reinstall28.png" alt="reinstall28" title="reinstall28">
<p>（图侵删）</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-02-11&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提示，这里很无聊。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;winpe&quot;&gt;&lt;a href=&quot;#winpe&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="教程" scheme="http://ldrtech.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="重装" scheme="http://ldrtech.cn/tags/%E9%87%8D%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>重装系统篇之能优化不重装</title>
    <link href="http://ldrtech.cn/2017/04/24/reinstall1/"/>
    <id>http://ldrtech.cn/2017/04/24/reinstall1/</id>
    <published>2017-04-24T07:47:30.000Z</published>
    <updated>2017-04-24T08:22:21.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-02-11</p>
</blockquote>
<p>大二写过一篇重装系统的文档，还没写完整。搬上来看看。小白文档，大神勿吐槽。<br>为何重装原因如下</p>
<ol>
<li>系统要升级（比方从win7升级到win8或win10） </li>
<li>系统崩溃了</li>
<li>中了病毒杀不了（格了重装）</li>
<li>重装系统成自娱自乐的乐趣</li>
<li>修复缺失的系统文件</li>
</ol>
<p><strong>好处</strong>:就是运行快，系统稳定，用起来舒服！<br><strong>坏处</strong>:就是反复地格式磁盘对硬盘不好！  需要重新安装驱动，软件</p>
<p>没必要重装的情况<br>对于一有问题就说要重装的说话时非常错误的，完全可以通过优化来完善系统</p>
<ol>
<li>电脑中毒     完全可以通过杀毒软件来清理</li>
<li>系统卡     可以通过第三方优化软件(如CCleaner)</li>
<li>网络出问题  可以360网络急救箱</li>
<li>系统引导不成功，黑屏错误代码     可以pe修复</li>
<li>等等</li>
</ol>
<p>我的世界观中对于能不重装就不重装，来说说别人说自己电脑卡的时候怎么来优化</p>
<p><strong>优化</strong><br>主要分为卸载多余软件和清理垃圾和禁用无用开机引导服务</p>
<h2 id="1-卸载多余软件"><a href="#1-卸载多余软件" class="headerlink" title="1.卸载多余软件"></a>1.卸载多余软件</h2><p>没错我说的不是别的，多余软件一般指的是<strong>管家和杀毒软件</strong>。</p>
<p>经常看妹子电脑都有电脑管家和杀毒（卧槽。就4g的小运存，占用率60-70%了）</p>
<p>真真问到为什么要装管家的时候，我听到最多的就是清理垃圾（杀鸡用牛刀）</p>
<p>其实一个管家，一个杀毒本身就是一个占据Cpu、内存资源的软件，尤其处理某些场景是，发现异常卡顿<br>其实对于电脑日常场景来说，是不必需要杀毒</p>
<p>win8和win10本身是自带杀毒软件（可能有人自己还不知道）</p>
<p>浏览正规网页和下载文件（自己留意是不会问题）。。。。至于浏览不可描述，那就不是讨论范围了<br>大多数浏览器都支持扩展程序（无疑广告屏蔽是首先）</p>
<p>有人跟我说过，其实你把杀毒卸载半年后重新安装杀毒也是会发现没有一个病毒</p>
<h2 id="2-清理垃圾"><a href="#2-清理垃圾" class="headerlink" title="2.清理垃圾"></a>2.清理垃圾</h2><p>清理垃圾不用特意安装个管家，把清理垃圾的软件提取出来不就行了<br>我经常使用的是cclean和金山毒霸垃圾清理单文件版<br>有空清下就好那种（基本两个月都没一次）<br><img src="/2017/04/24/reinstall1/reinstall1.png" alt="reinstall1" title="reinstall1"></p>
<p>##3.禁用无用开机引导服务 ##<br>这年头是个电脑软件都想自启动，要不加个服务<br>win8和win10系统中的任务管理器都可以禁用自启<br>也可以使用cclean<br><img src="/2017/04/24/reinstall1/reinstall2.png" alt="reinstall2" title="reinstall2"><br>到这里说自己电脑卡的就可以稍微流畅点了。那就完了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-02-11&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大二写过一篇重装系统的文档，还没写完整。搬上来看看。小白文档，大神勿吐槽。&lt;br&gt;为何重装原因如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统要升级（比方从win7升级到win8或win
    
    </summary>
    
      <category term="教程" scheme="http://ldrtech.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="重装" scheme="http://ldrtech.cn/tags/%E9%87%8D%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>对一个计算机师兄重装系统的吐槽</title>
    <link href="http://ldrtech.cn/2017/04/23/tucao/"/>
    <id>http://ldrtech.cn/2017/04/23/tucao/</id>
    <published>2017-04-23T03:38:29.000Z</published>
    <updated>2017-04-23T06:56:42.934Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-02-10 </p>
</blockquote>
<p>原本是帮师姐（已毕业）搞office的问题，几番折腾后问题还是有，好气啊。（家里又没网，只是文字描述不出方法，远程又卡）<br>想想师姐这是要工作的，这么折腾不行啊。不如叫师姐去重装吧（反正win8.1给我印象不好）。<br>师姐也说好，想换win7<br>可是吧！这过年期间我是没办法帮忙重装，又怕别人装的不好。所以吧我给出点要求吧，就是看看重装系统的人是什么水平。<br><img src="/2017/04/23/tucao/tucao1.png" alt="tucao1" title="tucao1"><br>我这有几个重点。</p>
<blockquote>
<p>师姐原来win8是我安装的<br>磁盘格式是gpt（uefi）<br>如果转mbr（加个如果是有道理的）<br>要原版镜像（iso文件）<br>不要ghost系统（gho文件）</p>
</blockquote>
<p>然后师姐各种求助别人安装，终于有一个了。（皆大欢喜）<br>然后就是考验他到底会不会了<br><img src="/2017/04/23/tucao/tucao2.png" alt="tucao2" title="tucao2"><br>这里还没有问题。。继续看<br><img src="/2017/04/23/tucao/tucao3.png" alt="tucao3" title="tucao3"><br>这里可以隐约猜到没有使用过分区精灵。也说明他不懂分区（开始意识到这人可能不行）<br><img src="/2017/04/23/tucao/tucao5.png" alt="tucao5" title="tucao5"><br>你这动不动要格盘的，人家资料多，谁折腾的起<br><img src="/2017/04/23/tucao/tucao4.png" alt="tucao4" title="tucao4"><br>想看看能不能纠正他先</p>
<p>大哥从你开始说方便快捷那一刻起，我基本确认你只会ghost方式还原系统，你对一个电脑小白上用ghost系统要命啊<br>无奈为了验证我的猜想，还是加个微信看看<br><img src="/2017/04/23/tucao/tucao6.png" alt="tucao6" title="tucao6"><br>还原对话</p>
<p>我：师兄，你在吗？</p>
<p>他：在啊，不在怎么通过你的验证。（好吧，我承认我处于礼貌的傻逼）</p>
<p>我：win8转7你是想怎么来的</p>
<p>他：（粤语）win8装win7，直接转硬盘格式化咯（我的天，要命）</p>
<p>他：将硬盘格式化后重新分区装系统（不错嘛，会分区，错怪了错怪了）</p>
<p>我：你用啥ghost镜像(名字)   （猜透你）</p>
<p>他：【图片】</p>
<p>特意不压缩修改，看出几个重点<br><img src="/2017/04/23/tucao/tucao7.jpg" alt="tucao7" title="tucao7"></p>
<ul>
<li>大白菜pe</li>
<li>ghost系统v5.5（看到有版本号，我的天）</li>
</ul>
<p>他自身电脑90%是这样装的，可能之前是win8的（我为啥知道，看到def盘是一键分区的我就能猜出来）<br>好吧我已经放弃你了<br><br>我：你浏览器主页被改了吧</p>
<p>他：肯定要改啊（所问非所答）</p>
<p>放弃了。赶紧叫师姐宁愿不装系统也别他来。这人没学到家，只是为了方便。<br><strong>为什么要吐槽？他要格盘憋！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-02-10 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原本是帮师姐（已毕业）搞office的问题，几番折腾后问题还是有，好气啊。（家里又没网，只是文字描述不出方法，远程又卡）&lt;br&gt;想想师姐这是要工作的，这么折腾不行啊。不如叫
    
    </summary>
    
      <category term="吐槽" scheme="http://ldrtech.cn/categories/%E5%90%90%E6%A7%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>个人博客网站（使用jpress）</title>
    <link href="http://ldrtech.cn/2017/04/23/jpress/"/>
    <id>http://ldrtech.cn/2017/04/23/jpress/</id>
    <published>2017-04-23T02:34:31.000Z</published>
    <updated>2017-04-23T03:15:14.084Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文发表：2017-02-01</p>
</blockquote>
<p>我为什么使用<strong>jpress（jfinal）</strong>而不使用<strong>wordpress（php）</strong>。<br>wordpress给我最大的感受就是卡，网上优化做法也使用过，没办法还是没办法忍受。<br>思来想去还是觉得换个平台好一点，刚好接触过一点点的java web。网上给jpress的评价也很高，那好就是你了。<br><a href="https://github.com/JpressProjects/jpress" target="_blank" rel="external">jpress github</a><br><img src="/2017/04/23/jpress/jpress1.png" alt="jpress示例" title="jpress示例"></p>
<blockquote>
<p>JPress，一个wordpress的java代替版本，使用JFinal开发。支持类似wordpress的几乎所有功能，比如：模板，插件等。同时在模板上，JPress提出了“模板即模型”的概念，方便模板制作人灵活制作业务模型，移除了widget等繁杂功能，同时在模板和插件制作上比wordpress更加灵活简洁。</p>
</blockquote>
<p>官方简介使用一大堆，但是我只是想单纯搭个博客先，所以直接下载war包。<br><img src="/2017/04/23/jpress/jpress2.png" alt="jpress下载" title="jpress下载"><br>根据最简单的原则，需要有以下环境</p>
<ul>
<li>tomcat</li>
<li>mysql（mariadb）</li>
<li>jdk</li>
</ul>
<p>基于平台centos7.2<br><strong>1.数据库，安装MariaDB</strong><br>安装命令</p>
<blockquote>
<p>yum -y install mariadb mariadb-server</p>
</blockquote>
<p>安装完成MariaDB，首先启动MariaDB</p>
<blockquote>
<p>systemctl start mariadb</p>
</blockquote>
<p>设置开机启动</p>
<blockquote>
<p>systemctl enable mariadb</p>
</blockquote>
<p>接下来进行MariaDB的相关简单配置</p>
<blockquote>
<p>mysql_secure_installation</p>
</blockquote>
<p>首先是设置密码，会提示先输入密码</p>
<blockquote>
<p>Enter current password for root (enter for none):&lt;–初次运行直接回车</p>
</blockquote>
<p>设置密码</p>
<blockquote>
<p>Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车<br>New password: &lt;– 设置root用户的密码<br>Re-enter new password: &lt;– 再输入一次你设置的密码</p>
</blockquote>
<p>其他配置</p>
<blockquote>
<p>Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车</p>
<p>Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,</p>
<p>Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车</p>
<p>Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车</p>
</blockquote>
<p>初始化MariaDB完成，接下来测试登录</p>
<blockquote>
<p>mysql -uroot -p你的密码<br>完成。</p>
</blockquote>
<p><strong>2.安装jdk</strong></p>
<p>如果自身有openjdk（试过能启动tomcat啊）那就省事了。<br>基于服务器系统没有任何jdk和jre前提下，官网下载对应的jdk<br><img src="/2017/04/23/jpress/jpress3.png" alt="jdk下载" title="jdk下载"><br>网上很多做法卸载open jdk安装oracle jdk<br>本地下载或者服务器wget后通过</p>
<blockquote>
<p>rpm -ivh 包名安装<br>通过javac 和 java -version验证安装成功与否。</p>
</blockquote>
<p>一般安装的基本不用配置环境变量也能使用。（反正我没配置）</p>
<p><strong>3.安装tomcat</strong></p>
<p>由于是linux平台直接选择tar.gz下载了。<br><img src="/2017/04/23/jpress/jpress4.png" alt="tomcat下载" title="tomcat下载"></p>
<blockquote>
<p>tar -xvf apa*</p>
</blockquote>
<p>重命名为tomcat<br>进入bin目录，启动tomcat</p>
<blockquote>
<p>./startup.sh</p>
</blockquote>
<p>通过访问127.0.0.1:8080（本地）或者域名:8080（服务器）查看运行正常否</p>
<p>服务器需要防火墙开放8080端口</p>
<p><strong>具体查看firewalld（centos7.0）和iptables（centos6.0）的开放方法</strong></p>
<p>基本配置后可以把前面下载war包放到webapps目录下，重启tomcat（先shutdown.sh再startup.sh），自动解压war包</p>
<p>为jpress文件夹。</p>
<p>通过访问</p>
<blockquote>
<p>127.0.0.1:8080/jpress（本地）或者域名:8080/jpress（服务器）</p>
</blockquote>
<p>进行安装<br>进一步优化可以使用nginx反向代理，具体自己查找了（以下为使用了nginx）<br>当JPress安装完毕后，访问</p>
<blockquote>
<p><a href="http://yoursite.com/admin" target="_blank" rel="external">http://yoursite.com/admin</a><br>本地：<br><a href="http://127.0.0.1/admin" target="_blank" rel="external">http://127.0.0.1/admin</a></p>
</blockquote>
<p>输入安装配置的账号密码，即可进入管理后台。<br>完工</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文发表：2017-02-01&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我为什么使用&lt;strong&gt;jpress（jfinal）&lt;/strong&gt;而不使用&lt;strong&gt;wordpress（php）&lt;/strong&gt;。&lt;br&gt;wordpress给
    
    </summary>
    
      <category term="教程" scheme="http://ldrtech.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>博客更新</title>
    <link href="http://ldrtech.cn/2017/04/20/new/"/>
    <id>http://ldrtech.cn/2017/04/20/new/</id>
    <published>2017-04-20T07:44:33.000Z</published>
    <updated>2017-04-24T08:48:53.144Z</updated>
    
    <content type="html"><![CDATA[<p>  说起来是个悲伤的故事，本来一开始有服务器的时候，lnmp很强势，所以用了一波wordpress，看起来wordpress主题多，插件多，应该不会错的，后来这速度是真的慢，无法忍受，又换成java版的wordpress—jpress，说实话很好用，前几天又崩溃了，主页加载不全，图片无法查看。很绝望。看看其他博客平台还是有点low，不喜欢，最后还是选择了hexo，没办法，这博客逼格高。<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  说起来是个悲伤的故事，本来一开始有服务器的时候，lnmp很强势，所以用了一波wordpress，看起来wordpress主题多，插件多，应该不会错的，后来这速度是真的慢，无法忍受，又换成java版的wordpress—jpress，说实话很好用，前几天又崩溃了，主页加载
    
    </summary>
    
      <category term="文章" scheme="http://ldrtech.cn/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="吐槽" scheme="http://ldrtech.cn/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
</feed>
